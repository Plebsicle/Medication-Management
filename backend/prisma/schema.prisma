generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                       Int                     @id @default(autoincrement())
  email                    String                  @unique
  password                 String?
  name                     String
  phone_number             String?
  role                     user_role               @default(patient)
  verified                 Boolean                 @default(false)
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  google_id                String?                 @unique
  profile_photo_path       String?
  doctor                   doctor?
  emailverificationtoken   emailverificationtoken?
  health_records           health_records[]
  patientprofile           patientprofile?
  subscriptions            subscription[]
  medications              medication[]
  patients                 patient_caretaker[]      @relation("CaretakerRelation")
  caretakers               patient_caretaker[]      @relation("PatientRelation")
  caretaker_healthRecords  health_records[]         @relation("caretaker_healthRecords")
  caretaker_medication     medication[]             @relation("caretaker_medication")
}

model doctor {
  doctor_id    Int    @id @default(autoincrement())
  user_id      Int    @unique
  speciality   String
  phone_number String
  user         user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model patient_caretaker {
  patient_id   Int
  caretaker_id Int

  patient   user @relation("PatientRelation", fields: [patient_id], references: [id], onDelete: Cascade)
  caretaker user @relation("CaretakerRelation", fields: [caretaker_id], references: [id], onDelete: Cascade)

  @@id([patient_id, caretaker_id])
  @@index([patient_id])
  @@index([caretaker_id])
}

model health_records {
  health_records_id Int      @id @default(autoincrement())
  user_id           Int
  caretaker_id      Int?
  record_date       DateTime
  blood_pressure    String?
  heart_rate        Int?
  weight            Decimal?
  temperature       Decimal?
  notes             String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user      user  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  caretaker user? @relation("caretaker_healthRecords", fields: [caretaker_id], references: [id], onDelete: SetNull)

  @@index([user_id])
}

model medication {
  medication_id     Int                @id @default(autoincrement())
  user_id           Int
  caretaker_id      Int?
  name              String
  type              medication_type
  dosage            String
  start_date        DateTime
  end_date          DateTime
  instructions      String?
  frequency         Int                @default(0)
  medication_times  medication_times[]
  notification      notification[]

  user              user               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  caretaker         user?              @relation("caretaker_medication", fields: [caretaker_id], references: [id], onDelete: SetNull)
}

model medication_times {
  medication_time_id Int        @id @default(autoincrement())
  medication_id      Int
  intake_time        String     @db.VarChar(5) // Store as "HH:mm"
  medication         medication @relation(fields: [medication_id], references: [medication_id], onDelete: Cascade)

  @@index([medication_id])
}
model notification {
  notification_id   Int                 @id @default(autoincrement())
  message           String
  created_at        DateTime            @default(now())
  medication_id     Int
  notification_on   Boolean             @default(true)
  updated_at        DateTime            @updatedAt

  medication        medication          @relation(fields: [medication_id], references: [medication_id], onDelete: Cascade)
  notification_logs notification_logs[]

  @@index([medication_id])
}

model notification_logs {
  log_id          Int          @id @default(autoincrement())
  sent_at         DateTime     @default(now())
  notification_id Int
  status          String

  notification    notification @relation(fields: [notification_id], references: [notification_id], onDelete: Cascade)

  @@index([notification_id])
}

model patientprofile {
  profile_id    Int                       @id @default(autoincrement())
  user_id       Int                       @unique
  age           Int
  weight        Decimal
  date_of_birth DateTime
  blood_type    patientprofile_blood_type
  address       String

  user          user                      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model subscription {
  subscription_id Int      @id @default(autoincrement())
  user_id         Int
  endpoint        String
  expiration_time DateTime?
  p256dh_key      String
  auth_key        String
  created_at      DateTime @default(now())

  user            user     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model emailverificationtoken {
  token_id   Int      @id @default(autoincrement())
  user_id    Int      @unique
  token      String
  expiration DateTime

  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

enum medication_type {
  pills
  syrup
  injection
}

enum patientprofile_blood_type {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum user_role {
  patient
  caregiver
  doctor
}
